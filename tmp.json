{
    "name": "write-up",
    "tags": [],
    "detail": "",
    "list": [
        {
            "name": "Fortnight_Challenge_2022",
            "tags": [],
            "detail": "",
            "list": [
                {
                    "name": "Cryptography",
                    "tags": [],
                    "detail": "",
                    "list": [
                        {
                            "name": "Deco de Crypto",
                            "tags": [
                                "https://img.shields.io/badge/Category-Cryptography-brightgreen.svg",
                                "https://img.shields.io/badge/Score_after_CTF-200-blue.svg",
                                "https://img.shields.io/badge/Author-SpookyFish%234588-blue.svg",
                                "https://img.shields.io/badge/Solves-34-lightgrey.svg"
                            ],
                            "detail": "<h1>Fortnight challenge 2022: Deco de Crypto</h1>\n<h2>Description</h2>\n<p>My friend Deco de Crypto sent me this and challenged me to find his message. But how am I supposed to crack this code?</p>\n<h2>Hints</h2>\n<ul>\n<li>None</li>\n</ul>\n<h2>Attached files</h2>\n<ul>\n<li><a href=\"https://raw.githubusercontent.com/compsec-hcmus/hcmus-fortnight-wu/main/Deco%20de%20Crypto/encoded\">encoded</a></li>\n</ul>\n<h2>Summary</h2>\n<p>I used base 32 decode and base 64 decode</p>\n<h2>Detailed solution</h2>\n<p>[Provide the detailed solution of the ctf here.]\nSome rules:\nName of tool, name of file, name of functions, etc: put in 1 set of backtick:  <code>name of something</code>\nCode snippet, console output, other long multilines of text: put in 3 sets of backticks on a new line:\n<code>code snippet</code>\nKey ideas, name of person who invented the method, etc: put in bold <strong>name of someone</strong></p>\n<p>[some more rules here]</p>\n<h2>Flag</h2>\n<pre><code>f0rtn1ght{n01ce_ba5e5}\n</code></pre>\n",
                            "list": []
                        }
                    ]
                },
                {
                    "name": "RE",
                    "tags": [],
                    "detail": "",
                    "list": [
                        {
                            "name": "ARGGGGH",
                            "tags": [
                                "https://img.shields.io/badge/Category-Reverse_Engineering-brightgreen.svg",
                                "https://img.shields.io/badge/Author-xikhud-blue.svg"
                            ],
                            "detail": "<h2>ARGGGGH</h2>\n<h3>Description</h3>\n<p>Can you crack the password for this challenge? If you think you can, prove it. Good luck!</p>\n<h3>Summary</h3>\n<p>Bài này sử dụng hai thuật toán nổi tiếng là RC4 và Base64. Ngoài ra nó còn sử dụng thủ thuật <a href=\"https://github.com/adamyaxley/Obfuscate\">compile-time string literal obfuscation</a>.</p>\n<h3>Detailed solution</h3>\n<p>Hàm <code>main</code>:</p>\n<pre><code class=\"language-c\">__int64 __fastcall <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a1, <span class=\"hljs-type\">char</span> **a2, <span class=\"hljs-type\">char</span> **a3)</span>\n{\n  <span class=\"hljs-comment\">// [COLLAPSED LOCAL DECLARATIONS. PRESS KEYPAD CTRL-&quot;+&quot; TO EXPAND]</span>\n\n  v19 = __readfsqword(<span class=\"hljs-number\">0x28</span>u);\n  v3 = sub_1588();\n  v4 = (<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *)sub_1E84((__int64)v3);\n  <span class=\"hljs-built_in\">printf</span>(v4);\n  fgets(s, <span class=\"hljs-number\">256</span>, <span class=\"hljs-built_in\">stdin</span>);\n  s[<span class=\"hljs-built_in\">strlen</span>(s) - <span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0</span>;\n  v16 = sub_24D9(s);\n  v5 = <span class=\"hljs-built_in\">strlen</span>(v16);\n  s1 = (<span class=\"hljs-type\">char</span> *)<span class=\"hljs-built_in\">calloc</span>(v5 + <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1uLL</span>);\n  v6 = sub_16CC();\n  v7 = sub_1F32((__int64)v6);\n  sub_1500(v7, (__int64)v16, (__int64)s1);\n  v8 = sub_1844();\n  v9 = (<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *)sub_1FE0((__int64)v8);\n  <span class=\"hljs-keyword\">if</span> ( !<span class=\"hljs-built_in\">strcmp</span>(s1, v9) )\n  {\n    v10 = sub_19CC();\n    v11 = (<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *)sub_208E((__int64)v10);\n    <span class=\"hljs-built_in\">printf</span>(v11, s);\n  }\n  <span class=\"hljs-keyword\">else</span>\n  {\n    v12 = sub_1AE8(&amp;v15);\n    v13 = (<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *)sub_213C(v12);\n    <span class=\"hljs-built_in\">printf</span>(v13);\n  }\n  <span class=\"hljs-built_in\">free</span>(s1);\n  <span class=\"hljs-built_in\">free</span>(v16);\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0LL</span>;\n}\n</code></pre>\n<p>Để ý rằng trong đoạn code trên có một số pattern như sau:</p>\n<pre><code class=\"language-c\">v3 = sub_XXXX();\nv4 = (<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *)sub_YYYY((__int64)v3);\n<span class=\"hljs-built_in\">printf</span>(v4); <span class=\"hljs-comment\">// use v4, don&#x27;t have to be printf</span>\n</code></pre>\n<p>Trong đó hàm <code>sub_XXXX</code> và <code>sub_YYYY</code> trông giống giống như sau:</p>\n<pre><code class=\"language-c\"><span class=\"hljs-type\">void</span> *<span class=\"hljs-title function_\">sub_XXXX</span><span class=\"hljs-params\">()</span>\n{\n  <span class=\"hljs-type\">char</span> v1[<span class=\"hljs-number\">40</span>]; <span class=\"hljs-comment\">// [rsp+20h] [rbp-40h] BYREF</span>\n  <span class=\"hljs-type\">unsigned</span> __int64 v2; <span class=\"hljs-comment\">// [rsp+48h] [rbp-18h]</span>\n\n  v2 = __readfsqword(<span class=\"hljs-number\">0x28</span>u);\n  v1[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">71</span>;\n  v1[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">-12</span>;\n  v1[<span class=\"hljs-number\">2</span>] = <span class=\"hljs-number\">-101</span>;\n  v1[<span class=\"hljs-number\">3</span>] = <span class=\"hljs-number\">43</span>;\n  v1[<span class=\"hljs-number\">4</span>] = <span class=\"hljs-number\">-119</span>;\n  v1[<span class=\"hljs-number\">5</span>] = <span class=\"hljs-number\">71</span>;\n  v1[<span class=\"hljs-number\">6</span>] = <span class=\"hljs-number\">-113</span>;\n  v1[<span class=\"hljs-number\">7</span>] = <span class=\"hljs-number\">119</span>;\n  v1[<span class=\"hljs-number\">8</span>] = <span class=\"hljs-number\">121</span>;\n  v1[<span class=\"hljs-number\">9</span>] = <span class=\"hljs-number\">-20</span>;\n  v1[<span class=\"hljs-number\">10</span>] = <span class=\"hljs-number\">-101</span>;\n  v1[<span class=\"hljs-number\">11</span>] = <span class=\"hljs-number\">56</span>;\n  v1[<span class=\"hljs-number\">12</span>] = <span class=\"hljs-number\">-38</span>;\n  v1[<span class=\"hljs-number\">13</span>] = <span class=\"hljs-number\">86</span>;\n  v1[<span class=\"hljs-number\">14</span>] = <span class=\"hljs-number\">-57</span>;\n  v1[<span class=\"hljs-number\">15</span>] = <span class=\"hljs-number\">119</span>;\n  v1[<span class=\"hljs-number\">16</span>] = <span class=\"hljs-number\">55</span>;\n  v1[<span class=\"hljs-number\">17</span>] = <span class=\"hljs-number\">-24</span>;\n  v1[<span class=\"hljs-number\">18</span>] = <span class=\"hljs-number\">-97</span>;\n  v1[<span class=\"hljs-number\">19</span>] = <span class=\"hljs-number\">57</span>;\n  v1[<span class=\"hljs-number\">20</span>] = <span class=\"hljs-number\">-119</span>;\n  v1[<span class=\"hljs-number\">21</span>] = <span class=\"hljs-number\">85</span>;\n  v1[<span class=\"hljs-number\">22</span>] = <span class=\"hljs-number\">-64</span>;\n  v1[<span class=\"hljs-number\">23</span>] = <span class=\"hljs-number\">96</span>;\n  v1[<span class=\"hljs-number\">24</span>] = <span class=\"hljs-number\">115</span>;\n  v1[<span class=\"hljs-number\">25</span>] = <span class=\"hljs-number\">-94</span>;\n  v1[<span class=\"hljs-number\">26</span>] = <span class=\"hljs-number\">-34</span>;\n  v1[<span class=\"hljs-number\">27</span>] = <span class=\"hljs-number\">74</span>;\n  <span class=\"hljs-keyword\">if</span> ( (_BYTE)byte_5060 || !__cxa_guard_acquire(&amp;byte_5060) )\n    <span class=\"hljs-keyword\">return</span> &amp;unk_5040;\n  sub_1DF8(&amp;unk_5040, v1);\n  __cxa_guard_release(&amp;byte_5060);\n  __cxa_atexit(func, &amp;unk_5040, &amp;dso_handle);\n  <span class=\"hljs-keyword\">return</span> &amp;unk_5040;\n}\n\n__int64 __fastcall <span class=\"hljs-title function_\">sub_YYYY</span><span class=\"hljs-params\">(__int64 a1)</span>\n{\n  __int64 result; <span class=\"hljs-comment\">// rax</span>\n\n  result = *(<span class=\"hljs-type\">unsigned</span> __int8 *)(a1 + <span class=\"hljs-number\">28</span>);\n  <span class=\"hljs-keyword\">if</span> ( !(_BYTE)result )\n    <span class=\"hljs-keyword\">return</span> result;\n  sub_1D91(a1, <span class=\"hljs-number\">28LL</span>, <span class=\"hljs-number\">0x12AF22FA4AFE9817</span>LL); <span class=\"hljs-comment\">// xor with [0x17, 0x98, 0xFE, 0x4A, 0xFA, 0x22, 0xAF, 0x12]</span>\n  result = a1;\n  *(_BYTE *)(a1 + <span class=\"hljs-number\">28</span>) = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">return</span> result;\n}\n</code></pre>\n<p>Khi đó đoạn code trên sẽ xor <code>[71, -12, -101, 43, ...]</code> với <code>[0x17, 0x98, 0xFE, 0x4A, 0xFA, 0x22, 0xAF, 0x12]</code> cho ra chuỗi <code>&quot;Please enter the password: &quot;</code></p>\n<p>Các pattern khác làm tương tự. Đây chính là <a href=\"https://github.com/adamyaxley/Obfuscate\">compile-time string literal obfuscation</a>.</p>\n<p>Đầu tiên input của chúng ta được đưa vào hàm <code>sub_24D9</code>. Hàm này thực chất là hàm base64 encode, nhưng làm sao để nhận diện hàm này? Có 1 số cách:</p>\n<ul>\n<li>Dùng debugger để quan sát return value sau khi chạy hàm này, sẽ thấy tất cả các character của nó đều thuộc khoảng A-Z, a-z, 0-9 và +, /.</li>\n<li>Đọc code của hàm <code>sub_24D9</code> thấy có chỗ <code>malloc(4 * v1 / 3 + 4)</code> với <code>v1</code> là độ dài chuỗi input. Thuật toán encode mà làm cho độ dài của chuỗi dài thêm 4/3 lần chính là base64.</li>\n</ul>\n<p>Tuy nhiên khi các bạn quan sát giá trị sau khi base64 encode thì sẽ thấy nó không chính xác so với việc các bạn tự encode. Đó là vì hàm base64 encode của mình sử dụng custom alphabet (xem hàm <code>sub_2302</code>).</p>\n<p><code>abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ+/</code></p>\n<p>Sau khi được base64 encode, nó lại được RC4 encrypt tại hàm <code>sub_1500</code>. Có 1 số cách để biết được hàm này là RC4, đã được viết trên fanpage, <a href=\"https://www.facebook.com/hcmus.compsec.club/posts/482321203493081\">tại đây</a>.</p>\n<p>Cuối cùng, sau khi được RC4 encrypt (với key là <code>&quot;YEKDx2ZoxDcCFZzjnhx8Vx8y9mp7DySPhKipmz0s&quot;</code>), nó sẽ được so sánh với một chuỗi hardcode bằng hàm <code>strcmp</code>. Từ đó ta dễ dàng tìm được flag là</p>\n<pre><code>flag = CustomBase64(RC4Decrypt(hardcode_string,  &quot;YEKDx2ZoxDcCFZzjnhx8Vx8y9mp7DySPhKipmz0s&quot;))\n</code></pre>\n<p><img src=\"img.png\" alt=\"\">\n<a href=\"https://gchq.github.io/CyberChef/#recipe=From_Hex('%5C%5Cx')RC4(%7B'option':'UTF8','string':'YEKDx2ZoxDcCFZzjnhx8Vx8y9mp7DySPhKipmz0s'%7D,'Latin1','Latin1')From_Base64('abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ%2B/',true)&amp;input=XHhjNVx4ZjRceGNlXHgwM1x4MmFceGQyXHhmZlx4MzhceDFlXHhiZFx4NjdceDQ5XHhlNFx4MTBceGU2XHg4Nlx4MTFceGU4XHgzYlx4MTBceDE4XHg4Nlx4ZGZceGVmXHhhOFx4YTdceDk4XHgzOFx4NjlceGFiXHhjNFx4ZWVceGUxXHg1YVx4NGFceDU0XHg4Ylx4ZTFceDAzXHgyMVx4NWNceGFmXHgxM1x4NmU\">----------------------- Link để test -----------------------</a>.</p>\n<h3>Flag</h3>\n<pre><code>f0rtn1ght{arc4_And_base64_boizzz}\n</code></pre>\n",
                            "list": []
                        },
                        {
                            "name": "SecureKeygen",
                            "tags": [
                                "https://img.shields.io/badge/Category-Reverse_Engineering-brightgreen.svg",
                                "https://img.shields.io/badge/Author-xikhud-blue.svg"
                            ],
                            "detail": "<h2>SecureKeygen</h2>\n<h3>Description</h3>\n<p>You dont have to buy a license if you can generate one. Please find a correct key for user “hcmus@fortnight”. The flag will be “f0rtn1ght{key}” (key is in lowercase)</p>\n<h3>Hints</h3>\n<ol>\n<li>Check function is written in C, not Java.</li>\n<li><a href=\"https://www.ragingrock.com/AndroidAppRE/reversing_native_libs.html\">Reference</a></li>\n<li><a href=\"https://frida.re/\">Instrumentation tool</a></li>\n</ol>\n<h3>Summary</h3>\n<p>Bài này thuật toán tạo key khá dễ, nhưng quan trọng là phải biết hàm tạo key nằm ở chỗ nào.</p>\n<h3>Detailed solution</h3>\n<p>Bài này có hai cách giải, một cách là static, tức là chỉ đọc và phân tích code, còn cách thứ hai là dynamic, ở cách này thay vì hiểu code thì ta sẽ quan sát các giá trị trong hàm check bằng tool <a href=\"https://frida.re/\">frida</a>.</p>\n<p>Đầu tiên mở app lên chạy\n<img src=\"bluestack.png\" alt=\"\">\nApp khá cơ bản, chỉ có 2 ô để nhập input và một nút check. Ta cần tìm một key hợp lệ cho <code>&quot;hcmus@fortnight&quot;</code>. Để decompile file apk, ta dùng tool <a href=\"https://github.com/skylot/jadx\">jadx</a> hoặc bất cứ tool nào mà các bạn biết là nó có thể decompile file apk.</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> com.example.securekeygen;\n\n<span class=\"hljs-keyword\">import</span> android.os.Bundle;\n<span class=\"hljs-keyword\">import</span> android.view.View;\n<span class=\"hljs-keyword\">import</span> android.widget.Button;\n<span class=\"hljs-keyword\">import</span> android.widget.EditText;\n<span class=\"hljs-keyword\">import</span> android.widget.Toast;\n<span class=\"hljs-keyword\">import</span> androidx.appcompat.app.AppCompatActivity;\n\n<span class=\"hljs-comment\">/* loaded from: classes.dex */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MainActivity</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">AppCompatActivity</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">native</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">check</span><span class=\"hljs-params\">(String str, String str2)</span>;\n\n    <span class=\"hljs-keyword\">static</span> {\n        System.loadLibrary(<span class=\"hljs-string\">&quot;nativeCheck&quot;</span>);\n    }\n\n    <span class=\"hljs-meta\">@Override</span> <span class=\"hljs-comment\">// androidx.fragment.app.FragmentActivity, androidx.activity.ComponentActivity, androidx.core.app.ComponentActivity, android.app.Activity</span>\n    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">onCreate</span><span class=\"hljs-params\">(Bundle bundle)</span> {\n        <span class=\"hljs-built_in\">super</span>.onCreate(bundle);\n        setContentView(R.layout.activity_main);\n        ((Button) findViewById(R.id.checkButton)).setOnClickListener(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">View</span>.OnClickListener() { <span class=\"hljs-comment\">// from class: com.example.securekeygen.MainActivity.1</span>\n            <span class=\"hljs-meta\">@Override</span> <span class=\"hljs-comment\">// android.view.View.OnClickListener</span>\n            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">onClick</span><span class=\"hljs-params\">(View view)</span> {\n                <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">obj</span> <span class=\"hljs-operator\">=</span> ((EditText) MainActivity.<span class=\"hljs-built_in\">this</span>.findViewById(R.id.nameEditText)).getText().toString();\n                <span class=\"hljs-keyword\">if</span> (MainActivity.<span class=\"hljs-built_in\">this</span>.check(obj, ((EditText) MainActivity.<span class=\"hljs-built_in\">this</span>.findViewById(R.id.keyEditText)).getText().toString())) {\n                    Toast.makeText(MainActivity.<span class=\"hljs-built_in\">this</span>.getApplicationContext(), String.format(<span class=\"hljs-string\">&quot;Nice, you have entered the correct key of \\&quot;%s\\&quot;&quot;</span>, obj), <span class=\"hljs-number\">0</span>).show();\n                } <span class=\"hljs-keyword\">else</span> {\n                    Toast.makeText(MainActivity.<span class=\"hljs-built_in\">this</span>.getApplicationContext(), String.format(<span class=\"hljs-string\">&quot;Wrong key for user \\&quot;%s\\&quot;&quot;</span>, obj), <span class=\"hljs-number\">0</span>).show();\n                }\n            }\n        });\n    }\n}\n</code></pre>\n<p>Ở trên là toàn bộ nội dung của <code>com.example.securekeygen.MainActivity</code>, có thể coi đây là hàm “main” trên app android.\nTa muốn vào nhánh in ra màn mình <code>&quot;Nice, you have entered ...&quot;</code>, khi đó cần có:</p>\n<pre><code class=\"language-java\">MainActivity.<span class=\"hljs-built_in\">this</span>.check(obj, ((EditText) MainActivity.<span class=\"hljs-built_in\">this</span>.findViewById(R.id.keyEditText)).getText().toString()) == <span class=\"hljs-literal\">true</span>\n</code></pre>\n<p>Hàm <code>check</code> sẽ thực hiện việc kiểm tra key và name xem có hợp lệ hay không, nhưng nếu nhìn trong đoạn code java của <code>MainActivity</code> thì sẽ không thấy code của hàm <code>check</code> đâu, mà chỉ thấy định nghĩa:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">native</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">check</span><span class=\"hljs-params\">(String str, String str2)</span>;\n</code></pre>\n<p>Đó là vì hàm này không được viết bằng code java mà nó được viết bằng C (hoặc C++). Trong <a href=\"https://www.ragingrock.com/AndroidAppRE/reversing_native_libs.html\">link ở hint</a> có hướng dẫn cách reverse những hàm như vậy. Các bạn có thể đọc link trên để tìm hiểu thêm, nhưng mình có thể tóm gọn lại các ý như sau:</p>\n<ul>\n<li>Nếu hàm đó tên là <code>check</code> thì tên hàm khi viết bằng C/C++ sẽ là <code>Java_com_example_securekeygen_MainActivity_check</code> (vì tên của package là <code>com.example.securekeygen</code>)</li>\n<li>Nếu trong code Java có đoạn code <code>System.loadLibrary(&quot;nativeCheck&quot;)</code> thì file chứa code C/C++ sẽ là file <code>libnativeCheck.so</code>. File này có thể lấy được bằng cách giải nén file apk ra và tìm ở tròng đó.</li>\n</ul>\n<blockquote>\n<p>File apk thật ra cũng chỉ là file zip, các bạn có thể đổi tên nó về thành .zip rồi dùng winrar để giải nén nó.</p>\n</blockquote>\n<p>Sau khi giải nén, các bạn sẽ tìm thấy tận 4 file có tên là <code>libnativeCheck.so</code>, 4 file này nằm ở 4 thư mục khác nhau là <code>arm64-v8a</code>, <code>armeabi-v7a</code>, <code>x86</code>, <code>x86_64</code>. Vậy ý nghĩa của 4 thư mục là gì?.</p>\n<p>Đó là vì các điện thoại bây giờ có các loại chip khác nhau, có điện thoại dùng chip arm, có cái xài intel, có cái 32 bit và có cái 64 bit. Để đảm bảo app này chạy được trên mọi loại điện thoại thì mình đã include cả 4 file này vào. 4 file này có tác dụng y chang nhau, chỉ khác về loại assembly code. Nên nếu bạn thích x86 thì có thể chọn file trong thư mục <code>x86</code> để reverse, không thì chọn file trong các thư mục khác cũng chả sao. Mình sẽ chọn file trong thư mục <code>x86</code> để làm tiếp bài này. Mở file bằng IDA, chạy tới hàm <code>Java_com_example_securekeygen_MainActivity_check</code>:</p>\n<pre><code class=\"language-c\"><span class=\"hljs-type\">bool</span> __cdecl <span class=\"hljs-title function_\">Java_com_example_securekeygen_MainActivity_check</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a1, <span class=\"hljs-type\">int</span> a2, <span class=\"hljs-type\">int</span> a3, <span class=\"hljs-type\">int</span> a4)</span>\n{\n  <span class=\"hljs-comment\">// [COLLAPSED LOCAL DECLARATIONS. PRESS KEYPAD CTRL-&quot;+&quot; TO EXPAND]</span>\n\n  v4 = (<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *)(*(<span class=\"hljs-type\">int</span> (__cdecl **)(<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">int</span>, _DWORD))(*(_DWORD *)a1 + <span class=\"hljs-number\">676</span>))(a1, a3, <span class=\"hljs-number\">0</span>);\n  v5 = strdup(v4);\n  (*(<span class=\"hljs-type\">void</span> (__cdecl **)(<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *))(*(_DWORD *)a1 + <span class=\"hljs-number\">680</span>))(a1, a3, v4);\n  v21 = v5;\n  v26 = <span class=\"hljs-built_in\">strlen</span>(v5);\n  v7 = (<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *)(*(<span class=\"hljs-type\">int</span> (__cdecl **)(<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">int</span>, _DWORD))(*(_DWORD *)a1 + <span class=\"hljs-number\">676</span>))(a1, a4, <span class=\"hljs-number\">0</span>);\n  v28 = strdup(v7);\n  v19 = v7;\n  v8 = v26;\n  (*(<span class=\"hljs-type\">void</span> (__cdecl **)(<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">int</span>))(*(_DWORD *)a1 + <span class=\"hljs-number\">680</span>))(a1, a4);\n  v22 = <span class=\"hljs-number\">2</span> * v26;\n  v9 = <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-number\">2</span> * v26 + <span class=\"hljs-number\">1</span>);\n  v27 = (<span class=\"hljs-type\">char</span> *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-number\">4</span> * v26 + <span class=\"hljs-number\">1</span>);\n  v23 = v9;\n  <span class=\"hljs-keyword\">if</span> ( v26 &lt;= <span class=\"hljs-number\">0</span> )\n  {\n    v10 = <span class=\"hljs-number\">0</span>;\n  }\n  <span class=\"hljs-keyword\">else</span>\n  {\n    <span class=\"hljs-built_in\">memcpy</span>(v9, v21, v26);\n    v10 = v26;\n  }\n  <span class=\"hljs-keyword\">if</span> ( v22 &lt;= v10 )\n  {\n    v14 = v10;\n  }\n  <span class=\"hljs-keyword\">else</span>\n  {\n    v24 = v22 + ~v10;\n    v11 = v26;\n    v12 = ((_BYTE)v22 - (_BYTE)v10) &amp; <span class=\"hljs-number\">3</span>;\n    <span class=\"hljs-keyword\">if</span> ( (((_BYTE)v22 - (_BYTE)v10) &amp; <span class=\"hljs-number\">3</span>) != <span class=\"hljs-number\">0</span> )\n    {\n      v13 = v23;\n      <span class=\"hljs-keyword\">do</span>\n      {\n        v23[v10++] = v21[--v11];\n        --v12;\n      }\n      <span class=\"hljs-keyword\">while</span> ( v12 );\n    }\n    <span class=\"hljs-keyword\">else</span>\n    {\n      v13 = v23;\n    }\n    v14 = <span class=\"hljs-number\">2</span> * v26;\n    v9 = v13;\n    v8 = v26;\n    <span class=\"hljs-keyword\">if</span> ( v24 &gt;= <span class=\"hljs-number\">3</span> )\n    {\n      v15 = &amp;v21[v11 - <span class=\"hljs-number\">1</span>];\n      <span class=\"hljs-keyword\">do</span>\n      {\n        v13[v10] = *v15;\n        v13[v10 + <span class=\"hljs-number\">1</span>] = *(v15 - <span class=\"hljs-number\">1</span>);\n        v13[v10 + <span class=\"hljs-number\">2</span>] = *(v15 - <span class=\"hljs-number\">2</span>);\n        v13[v10 + <span class=\"hljs-number\">3</span>] = *(v15 - <span class=\"hljs-number\">3</span>);\n        v10 += <span class=\"hljs-number\">4</span>;\n        v15 -= <span class=\"hljs-number\">4</span>;\n      }\n      <span class=\"hljs-keyword\">while</span> ( v22 != v10 );\n      v14 = <span class=\"hljs-number\">2</span> * v26;\n      v8 = v26;\n    }\n  }\n  v25 = <span class=\"hljs-number\">4</span> * v8;\n  v9[v14] = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">if</span> ( v8 &gt; <span class=\"hljs-number\">0</span> )\n  {\n    v16 = <span class=\"hljs-number\">0</span>;\n    v17 = v27;\n    <span class=\"hljs-keyword\">do</span>\n    {\n      sub_950(v17, <span class=\"hljs-number\">-1</span>, v19, v23[v16++]);\n      v17 += <span class=\"hljs-number\">2</span>;\n    }\n    <span class=\"hljs-keyword\">while</span> ( v16 &lt; v22 );\n  }\n  v27[v25] = <span class=\"hljs-number\">0</span>;\n  v20 = <span class=\"hljs-built_in\">strcmp</span>(v27, v28) == <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-built_in\">free</span>(v27);\n  <span class=\"hljs-built_in\">free</span>(v23);\n  <span class=\"hljs-built_in\">free</span>(v21);\n  <span class=\"hljs-built_in\">free</span>(v28);\n  <span class=\"hljs-keyword\">return</span> v20;\n}\n</code></pre>\n<p>Bạn có thể đổi type của biến <code>a1</code> thành <code>JNIEnv*</code>, sau đó code sẽ trông rất đẹp. Các đoạn code kiểu như:</p>\n<pre><code class=\"language-c\">(*(<span class=\"hljs-type\">void</span> (__cdecl **)(<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *))(*(_DWORD *)a1 + <span class=\"hljs-number\">680</span>))(a1, a3, v4);\n</code></pre>\n<p>sẽ được đổi thành</p>\n<pre><code class=\"language-c\">(*a1)-&gt;ReleaseStringUTFChars(a1, (jstring)a3, v4);\n</code></pre>\n<p><strong>Cách giải 1: static</strong></p>\n<p>Chỉ bằng việc đọc code, ta có thể thấy nó làm các việc sau: (viết theo syntax python cho ngắn)</p>\n<ul>\n<li><code>tmp = name + name[::-1]</code></li>\n<li><code>tmp = hex_encode(tmp)</code></li>\n<li>So sánh tmp với key.</li>\n</ul>\n<p><strong>Cách giải 2: dynamic</strong></p>\n<ul>\n<li>TODO</li>\n</ul>\n<h3>Flag</h3>\n<pre><code>f0rtn1ght{68636d757340666f72746e69676874746867696e74726f664073756d6368}\n</code></pre>\n",
                            "list": []
                        }
                    ]
                }
            ]
        }
    ]
}